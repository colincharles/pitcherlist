
require(pacman)
p_load(readr)
p_load(dplyr)
p_load(ggplot2)
p_load(DAAG)

pHR_data_scrape = function(minDate = "2019-03-01", maxDate = "2019-05-31"){
  
  # extract the year from minDate - this should prevent errors from other years
  season = substr(minDate, 1, 4)
  
  K_data = readr::read_csv(paste0("https://baseballsavant.mlb.com/statcast_search/csv?hfPT=&hfAB=strikeout%7Cstrikeout%5C.%5C.double%5C.%5C.play%7C&hfBBT=&hfPR=&hfZ=&stadium=&hfBBL=&hfNewZones=&hfGT=R%7C&hfC=&hfSea=",season,"%7C&hfSit=&player_type=batter&hfOuts=&opponent=&pitcher_throws=&batter_stands=&hfSA=&game_date_gt=", minDate,
                 "&game_date_lt=", maxDate,
                 "&hfInfield=&team=&position=&hfOutfield=&hfRO=&home_road=&hfFlag=&hfPull=&metric_1=&hfInn=&min_pitches=0&min_results=0&group_by=name&sort_col=pitches&player_event_sort=h_launch_speed&sort_order=desc&min_pas=0#results")) %>% 
    dplyr::select(pitches, player_id, player_name) %>% 
    dplyr::rename(SO = pitches)

  
  BB_data = read_csv(paste0("https://baseballsavant.mlb.com/statcast_search/csv?hfPT=&hfAB=walk%7C&hfBBT=&hfPR=&hfZ=&stadium=&hfBBL=&hfNewZones=&hfGT=R%7C&hfC=&hfSea=",season,"%7C&hfSit=&player_type=batter&hfOuts=&opponent=&pitcher_throws=&batter_stands=&hfSA=&game_date_gt=", minDate,
                          "&game_date_lt=", maxDate,
                          "&hfInfield=&team=&position=&hfOutfield=&hfRO=&home_road=&hfFlag=&hfPull=&metric_1=&hfInn=&min_pitches=0&min_results=0&group_by=name&sort_col=pitches&player_event_sort=h_launch_speed&sort_order=desc&min_pas=0#results")) %>% 
    dplyr::select(pitches, player_id, player_name) %>% 
    dplyr::rename(BB = pitches)
  
  barrels_data = read_csv(paste0("https://baseballsavant.mlb.com/statcast_search/csv?hfPT=&hfAB=&hfBBT=&hfPR=&hfZ=&stadium=&hfBBL=&hfNewZones=&hfGT=R%7C&hfC=&hfSea=",season,"%7C&hfSit=&player_type=batter&hfOuts=&opponent=&pitcher_throws=&batter_stands=&hfSA=6%7C&game_date_gt=",
                                 minDate,
                                 "&game_date_lt=", maxDate,
                                 "&hfInfield=&team=&position=&hfOutfield=&hfRO=&home_road=&hfFlag=&hfPull=&metric_1=&hfInn=&min_pitches=0&min_results=0&group_by=name&sort_col=pitches&player_event_sort=h_launch_speed&sort_order=desc&min_pas=0#results")) %>% 
    dplyr::select(pitches, player_id, player_name) %>% 
    dplyr::rename(barrels = pitches)
  
  # pulled FB & LD
  
  pulledFBLD_data = read_csv(paste0("https://baseballsavant.mlb.com/statcast_search/csv?hfPT=&hfAB=&hfBBT=fly%5C.%5C.ball%7Cline%5C.%5C.drive%7C&hfPR=&hfZ=&stadium=&hfBBL=&hfNewZones=&hfGT=R%7C&hfC=&hfSea=",season,"%7C&hfSit=&player_type=batter&hfOuts=&opponent=&pitcher_throws=&batter_stands=&hfSA=&game_date_gt=",
                                    minDate, "&game_date_lt=", maxDate,
                                    "&hfInfield=&team=&position=&hfOutfield=&hfRO=&home_road=&hfFlag=&hfPull=Pull%7C&metric_1=&hfInn=&min_pitches=1&min_results=0&group_by=name&sort_col=pitches&player_event_sort=h_launch_speed&sort_order=desc&min_pas=0")) %>% 
    dplyr::select(pitches, player_id, player_name) %>% 
    dplyr::rename(pulledFBLD = pitches)
  
  PA_data = read.csv(paste0("https://baseballsavant.mlb.com/statcast_search/csv?hfPT=&hfAB=single%7Cdouble%7Ctriple%7Chome%5C.%5C.run%7Cfield%5C.%5C.out%7Cstrikeout%7Cstrikeout%5C.%5C.double%5C.%5C.play%7Cwalk%7Cdouble%5C.%5C.play%7Cfield%5C.%5C.error%7Cgrounded%5C.%5C.into%5C.%5C.double%5C.%5C.play%7Cfielders%5C.%5C.choice%7Cfielders%5C.%5C.choice%5C.%5C.out%7Cbatter%5C.%5C.interference%7Ccatcher%5C.%5C.interf%7Ccaught%5C.%5C.stealing%5C.%5C.2b%7Ccaught%5C.%5C.stealing%5C.%5C.3b%7Ccaught%5C.%5C.stealing%5C.%5C.home%7Cforce%5C.%5C.out%7Chit%5C.%5C.by%5C.%5C.pitch%7Cintent%5C.%5C.walk%7Csac%5C.%5C.bunt%7Csac%5C.%5C.bunt%5C.%5C.double%5C.%5C.play%7Csac%5C.%5C.fly%7Csac%5C.%5C.fly%5C.%5C.double%5C.%5C.play%7Ctriple%5C.%5C.play%7C&hfBBT=&hfPR=&hfZ=&stadium=&hfBBL=&hfNewZones=&hfGT=R%7C&hfC=&hfSea=",season,"%7C&hfSit=&player_type=batter&hfOuts=&opponent=&pitcher_throws=&batter_stands=&hfSA=&game_date_gt=",
                            minDate, "&game_date_lt=", maxDate, 
                            "&hfInfield=&team=&position=&hfOutfield=&hfRO=&home_road=&hfFlag=&hfPull=&metric_1=&hfInn=&min_pitches=0&min_results=0&group_by=name&sort_col=pitches&player_event_sort=h_launch_speed&sort_order=desc&min_pas=0#results")) %>% 
    dplyr::select(pitches, player_id, player_name) %>% 
    dplyr::rename(PA = pitches)
  
  LD_data = read_csv(paste0("https://baseballsavant.mlb.com/statcast_search/csv?hfPT=&hfAB=&hfBBT=line%5C.%5C.drive%7C&hfPR=&hfZ=&stadium=&hfBBL=&hfNewZones=&hfGT=R%7C&hfC=&hfSea=",season,"%7C&hfSit=&player_type=batter&hfOuts=&opponent=&pitcher_throws=&batter_stands=&hfSA=&game_date_gt=",
                            minDate, "&game_date_lt=", maxDate, 
                            "&hfInfield=&team=&position=&hfOutfield=&hfRO=&home_road=&hfFlag=&hfPull=&metric_1=&hfInn=&min_pitches=0&min_results=0&group_by=name&sort_col=pitches&player_event_sort=h_launch_speed&sort_order=desc&min_pas=0#results")) %>% 
    dplyr::select(pitches, player_id, player_name) %>% 
    dplyr::rename(LD = pitches)
  
  HR_data = read_csv(paste0("https://baseballsavant.mlb.com/statcast_search/csv?hfPT=&hfAB=home%5C.%5C.run%7C&hfBBT=&hfPR=&hfZ=&stadium=&hfBBL=&hfNewZones=&hfGT=R%7C&hfC=&hfSea=",season,"%7C&hfSit=&player_type=batter&hfOuts=&opponent=&pitcher_throws=&batter_stands=&hfSA=&game_date_gt=",
                            minDate, "&game_date_lt=", maxDate, 
                            "&hfInfield=&team=&position=&hfOutfield=&hfRO=&home_road=&hfFlag=&hfPull=&metric_1=&hfInn=&min_pitches=0&min_results=0&group_by=name&sort_col=pitches&player_event_sort=h_launch_speed&sort_order=desc&min_pas=0#results")) %>% 
    dplyr::select(pitches, player_id, player_name) %>% 
    dplyr::rename(HR = pitches)
  
  df = left_join(K_data, BB_data) %>% 
    left_join(., barrels_data) %>% 
    left_join(., pulledFBLD_data) %>% 
    left_join(., PA_data) %>% 
    left_join(., LD_data) %>% 
    left_join(., HR_data) %>% 
    replace(., is.na(.), 0) %>% 
    mutate(season = season) %>% 
    mutate(brls_PA = 100 * (barrels/PA),
           pulledFBLD = pulledFBLD/PA,
           SO = SO/PA,
           BB = BB/PA,
           LD = LD/PA) %>% 
    dplyr::select(player_name, player_id, season, PA, everything()) 
  
  return(df)
  
}


# Do some testing. Scrape all data from 2015 to end of 2018

test1 = pHR_data_scrape(minDate = "2015-03-01", maxDate = "2015-10-31")

test2 = pHR_data_scrape(minDate = "2016-03-01", maxDate = "2016-10-31")

test3 = pHR_data_scrape(minDate = "2017-03-01", maxDate = "2017-10-31")

test4 = pHR_data_scrape(minDate = "2018-03-01", maxDate = "2018-10-31")


data1 = rbind(test1, test2, test3, test4)
data1$HR.PA = data1$HR/data1$PA

#####
#
### Quick 10-fold CV using the DAAG library
#
#####

#############################################################

DAAG::cv.lm(data = data1[data1$PA > 200,], form.lm = formula(HR.PA ~ PA + brls_PA + pulledFBLD + LD + SO + BB),
            m = 10, printit = FALSE)

#############################################################




#####
#
### Longer way of doing K-fold cross validation
#
#####

#Randomly shuffle the data
data2 = data1[sample(nrow(data1)),]

#Create 10 equally size folds
folds = cut(seq(1, nrow(data2)), breaks = 10, labels=FALSE)

# Function that returns Root Mean Squared Error
rmse <- function(error){
  sqrt(mean(error^2))
}

# Function that returns Mean Absolute Error
mae <- function(error){
  mean(abs(error))
}

resids = NULL
mae2 = NULL
# Perform 10 fold cross validation
for(i in 1:10){
  #Segement your data by fold using the which() function 
  testIndexes = which(folds == i, arr.ind = TRUE)
  
  testData = data2 %>% 
    slice(testIndexes) %>% 
    dplyr::filter(PA >= 200)
  
  trainData = data2 %>% 
    slice(-testIndexes) %>% 
    dplyr::filter(PA >= 200)
  # testData = data2[testIndexes, ]
  # trainData = data2[-testIndexes, ]

  mod = lm(HR.PA ~ PA + brls_PA + pulledFBLD + LD + SO + BB, data = trainData)
  # summary(mod)
  
  testData$predicted = predict(mod, newdata = testData)
   
  resids[i] = rmse(testData$HR.PA - testData$predicted)
  mae2[i] = mae(testData$HR.PA - testData$predicted)
  
}

ggplot(testData, aes(HR.PA, predicted)) + geom_point()

testData %>% 
  arrange(desc(HR.PA))

